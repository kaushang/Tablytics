let b=null,T=null,g={},S=null,u={},h={},w=new Set,l=!0,v=null,D=!1,m=Date.now(),f=[],d={},$=0,r=null,A=!1;const p=()=>{const e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}`};function P(){y()}function y(){const e=Date.now(),o=`session_${e}`;return chrome.storage.session.set({sessionStartTime:e,sessionId:o}),chrome.storage.local.set({persistentSessionStartTime:e,persistentSessionId:o,lastSessionId:o}),r=e,console.log("New session started:",o,"at",new Date(e)),o}chrome.storage.local.get(["tabData","activeDomain","timeLimits","strictLimits","isTrackingEnabled","dailyTabData","extensionReloadCount"],e=>{let o=0;e.extensionReloadCount!==void 0&&(o=e.extensionReloadCount+1),chrome.storage.local.set({extensionReloadCount:o}),console.log(`Extension reload count: ${o}`),e.tabData&&(g=e.tabData),e.activeDomain&&(S=e.activeDomain),e.timeLimits&&(u=e.timeLimits),e.strictLimits&&(h=e.strictLimits),e.isTrackingEnabled!==void 0&&(l=e.isTrackingEnabled),e.dailyTabData&&(d=e.dailyTabData);const a=p();d[a]||(d[a]={tabData:{},websitesVisited:[],totalTime:0},chrome.storage.local.set({dailyTabData:d})),chrome.runtime.getPlatformInfo(function(i){console.log("Extension loaded, platform:",i.os),I(),c()})});function E(e,o){const a=p();d[a]||(d[a]={tabData:{},websitesVisited:[],totalTime:0});const i=d[a];i.tabData[e]||(i.tabData[e]=0),i.tabData[e]+=o,i.websitesVisited.includes(e)||i.websitesVisited.push(e),i.totalTime=Object.values(i.tabData).reduce((t,s)=>t+s,0),chrome.storage.local.set({dailyTabData:d})}async function c(){if(l)try{$=Date.now();let o=[];const a=await chrome.windows.getAll({populate:!0});for(const i of a){const t=i.tabs.find(s=>s.active);if(t&&C(t)&&(o.push(t),i.focused&&(b=t.id,T=Date.now(),m=Date.now(),t.url)))try{t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("about:")||t.url.startsWith("edge://")?S=t.url.split("/").slice(0,3).join("/").replace(/\/$/,""):S=new URL(t.url).hostname,S||(S="New Tab"),chrome.storage.local.set({activeDomain:S})}catch(s){console.log("Error setting active domain:",s)}}f=o.filter(i=>{try{return i.url}catch{return!1}}),f.length>0&&!r&&y(),console.log(`Tracking ${f.length} active tabs across ${new Set(f.map(i=>i.windowId)).size} windows`)}catch(e){console.log("Error checking active tabs:",e)}}function C(e){try{return e&&e.url&&e.status==="complete"}catch{return!1}}const W=async(e,o)=>{if(u[e]&&o>=u[e])if(h[e]){if(!w.has(e)){console.log(`Strict time limit reached for ${e}. Closing tabs...`),w.add(e);const a=await chrome.tabs.query({});let i=0;for(const t of a)try{let s;t.url&&(t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("about:")||t.url.startsWith("edge://")?s=t.url.split("/").slice(0,3).join("/").replace(/\/$/,""):s=new URL(t.url).hostname,s||(s="New Tab"),s===e&&(await chrome.tabs.remove(t.id),i++))}catch(s){console.log("Error processing tab for strict limit:",s)}i>0&&(chrome.notifications.create({type:"basic",iconUrl:"icons/icon128.png",title:"Strict Time Limit Enforced",message:`Reached limit of ${L(u[e])} on ${e}. ${i} tab(s) have been closed.`}),console.log(`Removing strict time limit for ${e} after enforcement`),delete h[e],delete u[e],chrome.storage.local.set({timeLimits:u,strictLimits:h})),setTimeout(()=>{w.delete(e)},3e5)}}else w.has(e)||(chrome.notifications.create({type:"basic",iconUrl:"icons/icon128.png",title:"Time Limit Reached",message:`You've spent ${L(o)} on ${e}. Your limit was ${L(u[e])}.`}),w.add(e),setTimeout(()=>{w.delete(e)},36e5))},L=e=>{const o=Math.floor(e/1e3),a=Math.floor(o/60),i=Math.floor(a/60);return i>0?`${i}h ${a%60}m`:`${a}m ${o%60}s`};async function I(){try{const e=await chrome.tabs.query({}),o=new Set;for(const s of e)try{if(s.url){let n;s.url.startsWith("chrome://")||s.url.startsWith("chrome-extension://")||s.url.startsWith("about:")||s.url.startsWith("edge://")?n=s.url.split("/").slice(0,3).join("/").replace(/\/$/,""):n=new URL(s.url).hostname,n||(n="New Tab"),o.add(n)}}catch(n){console.log("Error processing tab URL:",n)}const a=p();let i=!1;const t={};for(const[s,n]of Object.entries(g))o.has(s)?t[s]=n:i=!0;i&&(g=t,chrome.storage.local.set({tabData:g}),console.log("Removed closed tabs from tracking data"))}catch(e){console.log("Error cleaning up closed tabs:",e)}}async function x(){if(!(D||!l)){D=!0;try{if(Date.now()-$>5e3&&await c(),!r){f.length>0&&(console.log("No session data but active tabs detected - attempting to recover session data"),chrome.storage.local.get(["persistentSessionStartTime","persistentSessionId"],t=>{t.persistentSessionStartTime?(console.log("Recovered session from persistent storage:",new Date(t.persistentSessionStartTime)),r=t.persistentSessionStartTime,chrome.storage.local.set({persistentSessionStartTime:t.persistentSessionStartTime,persistentSessionId:t.persistentSessionId}),chrome.storage.session.set({sessionStartTime:t.persistentSessionStartTime,sessionId:t.persistentSessionId})):(console.log("Could not recover session data - starting new session"),y())})),D=!1;return}if(f.length===0){D=!1;return}const o=Date.now(),a=1e3,i=a/f.length;for(const t of f)try{if(t.url){let s;t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("about:")||t.url.startsWith("edge://")?s=t.url.split("/").slice(0,3).join("/").replace(/\/$/,""):s=new URL(t.url).hostname,s||(s="New Tab"),g[s]||(g[s]=0),g[s]+=a,E(s,i),await W(s,g[s])}}catch(s){console.log("Error processing tab in tracking:",s)}await chrome.storage.local.set({tabData:g,persistentSessionStartTime:r,persistentSessionId:`session_${r}`}),await chrome.storage.session.set({sessionStartTime:r,sessionId:`session_${r}`}),T=o}catch(e){console.log("Error in tab tracking update:",e)}finally{D=!1}}}function k(){v&&clearInterval(v),v=setInterval(async()=>{r&&await x()},1e3),setInterval(async()=>{await c()},1e4)}chrome.tabs.onActivated.addListener(async e=>{console.log("Tab activated:",e),b=e.tabId,T=Date.now(),m=Date.now(),r||y(),await c()});chrome.tabs.onUpdated.addListener(async(e,o,a)=>{l&&(o.url&&(console.log("Tab URL changed:",e,o.url),m=Date.now(),await c()),o.status==="complete"&&await c(),m=Date.now())});chrome.tabs.onCreated.addListener(async e=>{l&&(console.log("New tab created:",e.id),m=Date.now(),await c())});chrome.tabs.onRemoved.addListener(async e=>{e===b&&(b=null,T=null,await c());const o=f.findIndex(a=>a.id===e);o>=0&&f.splice(o,1),setTimeout(async()=>{await I(),await c()},500)});chrome.windows.onFocusChanged.addListener(async e=>{e!==chrome.windows.WINDOW_ID_NONE&&(m=Date.now(),await c())});chrome.windows.onCreated.addListener(async e=>{m=Date.now(),await c()});chrome.runtime.onMessage.addListener((e,o,a)=>{if(e.type==="USER_ACTIVITY")return m=Date.now(),a({success:!0}),!0;if(e.type==="GET_TAB_DATA"){if(e.forceRefresh)c().then(()=>{I().then(()=>{const i=p(),t=d[i]||{websitesVisited:[],totalTime:0};chrome.storage.local.get(["trackingPaused","persistentSessionTimeAtPause"],s=>{let n=0;s.trackingPaused&&s.persistentSessionTimeAtPause?(n=s.persistentSessionTimeAtPause,console.log("Using paused session time:",n)):r&&(n=Date.now()-r),a({tabData:g,activeDomain:S,timeLimits:u,strictLimits:h,activeTabs:f,dailyData:t,sessionStartTime:r,currentSessionTime:n,isTrackingEnabled:l})})})});else{const i=p(),t=d[i]||{websitesVisited:[],totalTime:0};chrome.storage.local.get(["trackingPaused","persistentSessionTimeAtPause"],s=>{let n=0;s.trackingPaused&&s.persistentSessionTimeAtPause?(n=s.persistentSessionTimeAtPause,console.log("Using paused session time (non-force refresh):",n)):r&&(n=Date.now()-r),a({tabData:g,activeDomain:S,timeLimits:u,strictLimits:h,activeTabs:f,dailyData:t,sessionStartTime:r,currentSessionTime:n,isTrackingEnabled:l})})}return!0}else if(e.type==="CLEAR_DATA"){g={},S=null,w.clear();const i=Date.now(),t=`session_${i}`;return r=i,l?(T=Date.now(),m=Date.now()):(b=null,T=null,chrome.storage.local.set({trackingPaused:!0,trackingPausedAt:Date.now(),persistentSessionTimeAtPause:0})),chrome.storage.local.set({tabData:{},activeDomain:null,persistentSessionStartTime:i,persistentSessionId:t},()=>{a({success:!0,sessionStartTime:i,sessionId:t,currentSessionTime:0})}),chrome.storage.session.set({sessionStartTime:i,sessionId:t}),c(),!0}else if(e.type==="CLEAR_DAILY_DATA"){const i=p();return d[i]?(d[i]={tabData:{},websitesVisited:[],totalTime:0},chrome.storage.local.set({dailyTabData:d},()=>{a({success:!0})})):a({success:!0}),!0}else if(e.type==="SET_TIME_LIMIT"){const{domain:i,limit:t,strict:s}=e;return t?(u[i]=t,s?h[i]=!0:delete h[i]):(delete u[i],delete h[i]),chrome.storage.local.set({timeLimits:u,strictLimits:h},()=>{a({success:!0})}),!0}else if(e.type==="TOGGLE_TRACKING"){const i=!l;if(l=e.enabled,console.log(`Tracking ${l?"enabled":"disabled"}`),l)i&&(console.log("Tracking resumed - continuing from where we left off"),chrome.storage.local.get(["trackingPausedAt","persistentSessionTimeAtPause","trackingPaused"],t=>{if(t.trackingPaused&&t.trackingPausedAt&&t.persistentSessionTimeAtPause){console.log("Found pause data, resuming tracking from pause point");const s=Date.now(),n=s-t.persistentSessionTimeAtPause;r=n,chrome.storage.local.set({persistentSessionStartTime:n,persistentSessionId:`session_${n}`,trackingPaused:!1,trackingPausedAt:null}),chrome.storage.session.set({sessionStartTime:n,sessionId:`session_${n}`}),T=s,m=s}else console.log("No pause data found, continuing with existing session or starting new one"),T=Date.now(),m=Date.now(),r||y();c()}));else{console.log("Tracking paused - saving current progress");const t=Date.now();chrome.storage.local.set({trackingPausedAt:t,trackingPaused:!0,persistentSessionTimeAtPause:r?t-r:0}),T=null,m=null}return chrome.storage.local.set({isTrackingEnabled:l},()=>{a({success:!0,isTrackingEnabled:l})}),!0}});chrome.tabs.onUpdated.addListener((e,o,a)=>{l&&e===b&&o.status&&(T=Date.now(),m=Date.now())});chrome.runtime.onStartup.addListener(()=>{console.log("Browser started - initializing session tracking"),r=null,A=!0;const e=Date.now();chrome.storage.local.set({lastBrowserStartTime:e}),P(),c()});chrome.runtime.onSuspend.addListener(()=>{console.log("Browser closing - recording shutdown time");const e=Date.now();chrome.storage.local.set({lastBrowserCloseTime:e})});I();chrome.storage.local.get(["lastBrowserCloseTime","extensionReloadCount","persistentSessionStartTime","persistentSessionId"],e=>{A?(console.log("Browser startup detected - resetting session time to 0"),r=null,chrome.storage.local.set({extensionReloadCount:0}),chrome.storage.local.remove(["persistentSessionStartTime","persistentSessionId"]),chrome.storage.session.remove(["sessionStartTime","sessionId"]),P(),A=!1,k(),c()):(console.log("Extension reload detected - preserving current session"),e.persistentSessionStartTime&&e.persistentSessionId?(console.log(`Restoring session ${e.persistentSessionId} with start time ${new Date(e.persistentSessionStartTime)}`),r=e.persistentSessionStartTime,chrome.storage.session.set({sessionStartTime:e.persistentSessionStartTime,sessionId:e.persistentSessionId}),chrome.storage.local.set({persistentSessionStartTime:e.persistentSessionStartTime,persistentSessionId:e.persistentSessionId})):chrome.storage.session.get(["sessionStartTime","sessionId"],o=>{o.sessionStartTime&&o.sessionId?(console.log("Restoring session from current browser session:",o.sessionId),r=o.sessionStartTime,chrome.storage.local.set({persistentSessionStartTime:o.sessionStartTime,persistentSessionId:o.sessionId})):(console.log("No existing session found, initializing new session"),P())}),k(),c())});
