let o=null,s=null,m={},l=null,c={},r={},w=new Set,f=!0,T=null,L=!1,u=Date.now();chrome.storage.local.get(["tabData","activeDomain","timeLimits","strictLimits","isTrackingEnabled"],t=>{t.tabData&&(m=t.tabData),t.activeDomain&&(l=t.activeDomain),t.timeLimits&&(c=t.timeLimits),t.strictLimits&&(r=t.strictLimits),t.isTrackingEnabled!==void 0&&(f=t.isTrackingEnabled),h(),D(),y()});async function h(){try{const t=await chrome.tabs.query({active:!0,currentWindow:!0});if(t.length>0){const e=t[0];if(e.id!==o){if(o=e.id,s=Date.now(),u=Date.now(),e.url)try{l=new URL(e.url).hostname,chrome.storage.local.set({activeDomain:l})}catch(a){console.log("Error setting active domain:",a)}console.log("Active tab updated to:",o,"Domain:",l)}else u=Date.now()}}catch(t){console.log("Error checking active tab:",t)}}const p=async(t,e)=>{if(c[t]&&e>=c[t])if(r[t]){const a=await chrome.tabs.query({});for(const i of a)try{i.url&&new URL(i.url).hostname===t&&chrome.tabs.remove(i.id)}catch(b){console.log("Error processing tab for strict limit:",b)}chrome.notifications.create({type:"basic",iconUrl:"icons/icon128.png",title:"Strict Time Limit Enforced",message:`Reached limit of ${v(c[t])} on ${t}. Tabs have been closed.`})}else w.has(t)||(chrome.notifications.create({type:"basic",iconUrl:"icons/icon128.png",title:"Time Limit Reached",message:`You've spent ${v(e)} on ${t}. Your limit was ${v(c[t])}.`}),w.add(t),setTimeout(()=>{w.delete(t)},36e5))},v=t=>{const e=Math.floor(t/1e3),a=Math.floor(e/60),i=Math.floor(a/60);return i>0?`${i}h ${a%60}m`:`${a}m ${e%60}s`};async function D(){try{const t=await chrome.tabs.query({}),e=new Set;for(const n of t)try{if(n.url){const g=new URL(n.url).hostname;g&&e.add(g)}}catch(g){console.log("Error processing tab URL:",g)}let a=!1;const i={};for(const[n,g]of Object.entries(m))e.has(n)?i[n]=g:a=!0;const b={};for(const[n,g]of Object.entries(c))e.has(n)?b[n]=g:a=!0;const d={};for(const n in r)e.has(n)?d[n]=r[n]:a=!0;a&&(m=i,c=b,r=d,chrome.storage.local.set({tabData:m,timeLimits:c,strictLimits:r}),console.log("Removed closed tabs from tracking data, time limits, and strict limits"))}catch(t){console.log("Error cleaning up closed tabs:",t)}}async function E(){if(Date.now()-u>5e3&&(console.log("Too much time since last activity update, checking active tab..."),await h()),!(L||!f||!o||!s)){L=!0;try{const e=await chrome.tabs.get(o);if(e&&e.url){const a=Date.now(),i=a-s,b=Math.min(i,1e3),d=new URL(e.url).hostname;m[d]||(m[d]=0),m[d]+=b,s=a,u=a,await chrome.storage.local.set({tabData:m}),await p(d,m[d])}else await h()}catch(e){console.log("Error updating active tab time:",e),e.message&&e.message.includes("No tab with id")&&(o=null,s=null,l=null,await h())}finally{L=!1}}}function y(){T&&clearInterval(T),T=setInterval(async()=>{await E()},1e3),setInterval(async()=>{Date.now()-u>3e3&&(console.log("Heartbeat check - no recent updates, checking active tab"),await h())},5e3)}chrome.tabs.onActivated.addListener(async t=>{if(console.log("Tab activated:",t),!f){o=t.tabId;return}o=t.tabId,s=Date.now(),u=Date.now();try{const e=await chrome.tabs.get(o);e.url&&(l=new URL(e.url).hostname,chrome.storage.local.set({activeDomain:l}))}catch(e){console.log("Error getting active tab:",e)}});chrome.tabs.onUpdated.addListener((t,e,a)=>{f&&(t===o&&e.url&&(s=Date.now(),u=Date.now(),l=new URL(a.url).hostname,chrome.storage.local.set({activeDomain:l})),t===o&&(u=Date.now()))});chrome.tabs.onRemoved.addListener(async t=>{t===o&&(o=null,s=null,l=null,chrome.storage.local.set({activeDomain:null}),await h()),await D()});chrome.windows.onFocusChanged.addListener(async t=>{t!==chrome.windows.WINDOW_ID_NONE&&await h()});chrome.runtime.onMessage.addListener((t,e,a)=>{if(t.type==="USER_ACTIVITY")return u=Date.now(),a({success:!0}),!0;if(t.type==="GET_TAB_DATA")return h().then(()=>{D().then(()=>{a({tabData:m,activeDomain:l,timeLimits:c,strictLimits:r})})}),!0;if(t.type==="CLEAR_DATA")return m={},c={},r={},l=null,w.clear(),f?(s=Date.now(),u=Date.now()):(o=null,s=null),chrome.storage.local.set({tabData:{},timeLimits:{},strictLimits:{},activeDomain:null},()=>{a({success:!0})}),!0;if(t.type==="SET_TIME_LIMIT"){const{domain:i,limit:b,strict:d}=t;return b?(c[i]=b,d?r[i]=!0:delete r[i]):(delete c[i],delete r[i]),chrome.storage.local.set({timeLimits:c,strictLimits:r},()=>{a({success:!0})}),!0}else if(t.type==="TOGGLE_TRACKING")return f=t.enabled,f?h():(o=null,s=null),chrome.storage.local.set({isTrackingEnabled:f},()=>{a({success:!0,isTrackingEnabled:f})}),!0});chrome.tabs.onUpdated.addListener((t,e,a)=>{f&&t===o&&e.status&&(s=Date.now(),u=Date.now())});D();y();h();
