let p=null,T=null,m={},w=null,l={},g={},S=new Set,f=!0,L=null,D=!1,h=Date.now(),d=[],c={},A=0,r=null,$=!1;const b=()=>{const e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}`};function E(){y()}function y(){const e=Date.now(),s=`session_${e}`;return chrome.storage.session.set({sessionStartTime:e,sessionId:s}),chrome.storage.local.set({persistentSessionStartTime:e,persistentSessionId:s,lastSessionId:s}),r=e,console.log("New session started:",s,"at",new Date(e)),s}chrome.storage.local.get(["tabData","activeDomain","timeLimits","strictLimits","isTrackingEnabled","dailyTabData","extensionReloadCount"],e=>{let s=0;e.extensionReloadCount!==void 0&&(s=e.extensionReloadCount+1),chrome.storage.local.set({extensionReloadCount:s}),console.log(`Extension reload count: ${s}`),e.tabData&&(m=e.tabData),e.activeDomain&&(w=e.activeDomain),e.timeLimits&&(l=e.timeLimits),e.strictLimits&&(g=e.strictLimits),e.isTrackingEnabled!==void 0&&(f=e.isTrackingEnabled),e.dailyTabData&&(c=e.dailyTabData);const a=b();c[a]||(c[a]={tabData:{},websitesVisited:[],totalTime:0},chrome.storage.local.set({dailyTabData:c})),chrome.runtime.getPlatformInfo(function(i){console.log("Extension loaded, platform:",i.os),I(),n()})});function W(e,s){const a=b();c[a]||(c[a]={tabData:{},websitesVisited:[],totalTime:0});const i=c[a];i.tabData[e]||(i.tabData[e]=0),i.tabData[e]+=s,i.websitesVisited.includes(e)||i.websitesVisited.push(e),i.totalTime=Object.values(i.tabData).reduce((t,o)=>t+o,0),chrome.storage.local.set({dailyTabData:c})}async function n(){if(f)try{A=Date.now();let s=[];const a=await chrome.windows.getAll({populate:!0});for(const i of a){const t=i.tabs.find(o=>o.active);if(t&&x(t)&&(s.push(t),i.focused&&(p=t.id,T=Date.now(),h=Date.now(),t.url)))try{t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("about:")||t.url.startsWith("edge://")?w=t.url.split("/").slice(0,3).join("/").replace(/\/$/,""):w=new URL(t.url).hostname,w||(w="New Tab"),chrome.storage.local.set({activeDomain:w})}catch(o){console.log("Error setting active domain:",o)}}d=s.filter(i=>{try{return i.url}catch{return!1}}),d.length>0&&!r&&y(),console.log(`Tracking ${d.length} active tabs across ${new Set(d.map(i=>i.windowId)).size} windows`)}catch(e){console.log("Error checking active tabs:",e)}}function x(e){try{return e&&e.url&&e.status==="complete"}catch{return!1}}const N=async(e,s)=>{if(l[e]&&s>=l[e])if(g[e]){if(!S.has(e)){console.log(`Strict time limit reached for ${e}. Closing tabs...`),S.add(e);const a=await chrome.tabs.query({});let i=0;for(const t of a)try{let o;t.url&&(t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("about:")||t.url.startsWith("edge://")?o=t.url.split("/").slice(0,3).join("/").replace(/\/$/,""):o=new URL(t.url).hostname,o||(o="New Tab"),o===e&&(await chrome.tabs.remove(t.id),i++))}catch(o){console.log("Error processing tab for strict limit:",o)}i>0&&(chrome.notifications.create({type:"basic",iconUrl:"icons/icon128.png",title:"Strict Time Limit Enforced",message:`Reached limit of ${v(l[e])} on ${e}. ${i} tab(s) have been closed.`}),console.log(`Removing strict time limit for ${e} after enforcement`),delete g[e],delete l[e],chrome.storage.local.set({timeLimits:l,strictLimits:g})),setTimeout(()=>{S.delete(e)},3e5)}}else S.has(e)||(chrome.notifications.create({type:"basic",iconUrl:"icons/icon128.png",title:"Time Limit Reached",message:`You've spent ${v(s)} on ${e}. Your limit was ${v(l[e])}.`}),S.add(e),setTimeout(()=>{S.delete(e)},36e5))},v=e=>{const s=Math.floor(e/1e3),a=Math.floor(s/60),i=Math.floor(a/60);return i>0?`${i}h ${a%60}m`:`${a}m ${s%60}s`};async function I(){try{const e=await chrome.tabs.query({}),s=new Set;for(const o of e)try{if(o.url){let u;o.url.startsWith("chrome://")||o.url.startsWith("chrome-extension://")||o.url.startsWith("about:")||o.url.startsWith("edge://")?u=o.url.split("/").slice(0,3).join("/").replace(/\/$/,""):u=new URL(o.url).hostname,u||(u="New Tab"),s.add(u)}}catch(u){console.log("Error processing tab URL:",u)}const a=b();let i=!1;const t={};for(const[o,u]of Object.entries(m))s.has(o)?t[o]=u:i=!0;i&&(m=t,chrome.storage.local.set({tabData:m}),console.log("Removed closed tabs from tracking data"))}catch(e){console.log("Error cleaning up closed tabs:",e)}}async function U(){if(!(D||!f)){D=!0;try{if(Date.now()-A>5e3&&await n(),!r){d.length>0&&(console.log("No session data but active tabs detected - attempting to recover session data"),chrome.storage.local.get(["persistentSessionStartTime","persistentSessionId"],t=>{t.persistentSessionStartTime?(console.log("Recovered session from persistent storage:",new Date(t.persistentSessionStartTime)),r=t.persistentSessionStartTime,chrome.storage.local.set({persistentSessionStartTime:t.persistentSessionStartTime,persistentSessionId:t.persistentSessionId}),chrome.storage.session.set({sessionStartTime:t.persistentSessionStartTime,sessionId:t.persistentSessionId})):(console.log("Could not recover session data - starting new session"),y())})),D=!1;return}if(d.length===0){D=!1;return}const s=Date.now(),a=1e3,i=a/d.length;for(const t of d)try{if(t.url){let o;t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("about:")||t.url.startsWith("edge://")?o=t.url.split("/").slice(0,3).join("/").replace(/\/$/,""):o=new URL(t.url).hostname,o||(o="New Tab"),m[o]||(m[o]=0),m[o]+=a,W(o,i),await N(o,m[o])}}catch(o){console.log("Error processing tab in tracking:",o)}await chrome.storage.local.set({tabData:m,persistentSessionStartTime:r,persistentSessionId:`session_${r}`}),await chrome.storage.session.set({sessionStartTime:r,sessionId:`session_${r}`}),T=s}catch(e){console.log("Error in tab tracking update:",e)}finally{D=!1}}}function C(){L&&clearInterval(L),L=setInterval(async()=>{r&&await U()},1e3),setInterval(async()=>{await n()},1e4)}chrome.tabs.onActivated.addListener(async e=>{console.log("Tab activated:",e),p=e.tabId,T=Date.now(),h=Date.now(),r||y(),await n()});chrome.tabs.onUpdated.addListener(async(e,s,a)=>{f&&(s.url&&(console.log("Tab URL changed:",e,s.url),h=Date.now(),await n()),s.status==="complete"&&await n(),h=Date.now())});chrome.tabs.onCreated.addListener(async e=>{f&&(console.log("New tab created:",e.id),h=Date.now(),await n())});chrome.tabs.onRemoved.addListener(async e=>{e===p&&(p=null,T=null,await n());const s=d.findIndex(a=>a.id===e);s>=0&&d.splice(s,1),setTimeout(async()=>{await I(),await n()},500)});chrome.windows.onFocusChanged.addListener(async e=>{e!==chrome.windows.WINDOW_ID_NONE&&(h=Date.now(),await n())});chrome.windows.onCreated.addListener(async e=>{h=Date.now(),await n()});chrome.runtime.onMessage.addListener((e,s,a)=>{if(e.type==="USER_ACTIVITY")return h=Date.now(),a({success:!0}),!0;if(e.type==="GET_TAB_DATA"){if(e.forceRefresh)n().then(()=>{I().then(()=>{const i=b(),t=c[i]||{websitesVisited:[],totalTime:0};a({tabData:m,activeDomain:w,timeLimits:l,strictLimits:g,activeTabs:d,dailyData:t,sessionStartTime:r,currentSessionTime:r?Date.now()-r:0})})});else{const i=b(),t=c[i]||{websitesVisited:[],totalTime:0};a({tabData:m,activeDomain:w,timeLimits:l,strictLimits:g,activeTabs:d,dailyData:t,sessionStartTime:r,currentSessionTime:r?Date.now()-r:0})}return!0}else{if(e.type==="CLEAR_DATA")return m={},w=null,S.clear(),f?(T=Date.now(),h=Date.now()):(p=null,T=null),chrome.storage.local.set({tabData:{},activeDomain:null},()=>{a({success:!0})}),n(),!0;if(e.type==="CLEAR_DAILY_DATA"){const i=b();return c[i]?(c[i]={tabData:{},websitesVisited:[],totalTime:0},chrome.storage.local.set({dailyTabData:c},()=>{a({success:!0})})):a({success:!0}),!0}else if(e.type==="SET_TIME_LIMIT"){const{domain:i,limit:t,strict:o}=e;return t?(l[i]=t,o?g[i]=!0:delete g[i]):(delete l[i],delete g[i]),chrome.storage.local.set({timeLimits:l,strictLimits:g},()=>{a({success:!0})}),!0}else if(e.type==="TOGGLE_TRACKING")return f=e.enabled,f?(T=Date.now(),h=Date.now(),r||y(),n()):T=null,chrome.storage.local.set({isTrackingEnabled:f},()=>{a({success:!0,isTrackingEnabled:f})}),!0}});chrome.tabs.onUpdated.addListener((e,s,a)=>{f&&e===p&&s.status&&(T=Date.now(),h=Date.now())});chrome.runtime.onStartup.addListener(()=>{console.log("Browser started - initializing session tracking"),r=null,$=!0;const e=Date.now();chrome.storage.local.set({lastBrowserStartTime:e}),E(),n()});chrome.runtime.onSuspend.addListener(()=>{console.log("Browser closing - recording shutdown time");const e=Date.now();chrome.storage.local.set({lastBrowserCloseTime:e})});I();chrome.storage.local.get(["lastBrowserCloseTime","extensionReloadCount","persistentSessionStartTime","persistentSessionId"],e=>{$?(console.log("Browser startup detected - resetting session time to 0"),r=null,chrome.storage.local.set({extensionReloadCount:0}),chrome.storage.local.remove(["persistentSessionStartTime","persistentSessionId"]),chrome.storage.session.remove(["sessionStartTime","sessionId"]),E(),$=!1,C(),n()):(console.log("Extension reload detected - preserving current session"),e.persistentSessionStartTime&&e.persistentSessionId?(console.log(`Restoring session ${e.persistentSessionId} with start time ${new Date(e.persistentSessionStartTime)}`),r=e.persistentSessionStartTime,chrome.storage.session.set({sessionStartTime:e.persistentSessionStartTime,sessionId:e.persistentSessionId}),chrome.storage.local.set({persistentSessionStartTime:e.persistentSessionStartTime,persistentSessionId:e.persistentSessionId})):chrome.storage.session.get(["sessionStartTime","sessionId"],s=>{s.sessionStartTime&&s.sessionId?(console.log("Restoring session from current browser session:",s.sessionId),r=s.sessionStartTime,chrome.storage.local.set({persistentSessionStartTime:s.sessionStartTime,persistentSessionId:s.sessionId})):(console.log("No existing session found, initializing new session"),E())}),C(),n())});
